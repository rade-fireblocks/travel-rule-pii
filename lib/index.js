function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import PIIsdk, { initAgent, PIIEncryptionMethod } from "@notabene/pii-sdk";
const requiredFields = ["kmsSecretKey", "baseURLPII", "audiencePII", "clientId", "clientSecret", "authURL", "jsonDidKey"];
export class PIIEncryption {
  constructor(config) {
    this.config = config;
    _defineProperty(this, "toolset", void 0);
    this.config = config;
    const missingFields = requiredFields.filter(field => !(field in this.config));
    if (missingFields.length > 0) {
      throw new Error(`Missing PII configuration fields: ${missingFields.join(", ")}`);
    }
    this.toolset = new PIIsdk({
      kmsSecretKey: config.kmsSecretKey,
      piiURL: config.baseURLPII,
      audience: config.audiencePII,
      clientId: config.clientId,
      clientSecret: config.clientSecret,
      authURL: config.authURL
    });
  }
  async hybridEncode(travelRuleMessage) {
    const pii = travelRuleMessage.pii || {
      originator: travelRuleMessage.originator,
      beneficiary: travelRuleMessage.beneficiary
    };
    const {
      beneficiaryDidKey,
      jsonDidKey,
      kmsSecretKey
    } = this.config;
    const counterpartyDIDKey = beneficiaryDidKey || undefined;
    let piiIvms;
    let agent;
    try {
      agent = initAgent({
        KMS_SECRET_KEY: kmsSecretKey
      }).agent;
      await agent.didManagerImport(JSON.parse(jsonDidKey));
      piiIvms = await this.toolset.generatePIIField({
        pii,
        originatorVASPdid: travelRuleMessage.originatorVASPdid,
        beneficiaryVASPdid: travelRuleMessage.beneficiaryVASPdid,
        counterpartyDIDKey,
        agent,
        senderDIDKey: JSON.parse(jsonDidKey).did,
        encryptionMethod: PIIEncryptionMethod.HYBRID
      });
    } catch (error) {
      const errorMessage = error.message || error.toString();
      const errorDetails = JSON.stringify(error);
      throw new Error(`Failed to generate PII fields error: ${errorMessage}. Details: ${errorDetails}`);
    }
    return travelRuleMessage;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQSUlzZGsiLCJpbml0QWdlbnQiLCJQSUlFbmNyeXB0aW9uTWV0aG9kIiwicmVxdWlyZWRGaWVsZHMiLCJQSUlFbmNyeXB0aW9uIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJfZGVmaW5lUHJvcGVydHkiLCJtaXNzaW5nRmllbGRzIiwiZmlsdGVyIiwiZmllbGQiLCJsZW5ndGgiLCJFcnJvciIsImpvaW4iLCJ0b29sc2V0Iiwia21zU2VjcmV0S2V5IiwicGlpVVJMIiwiYmFzZVVSTFBJSSIsImF1ZGllbmNlIiwiYXVkaWVuY2VQSUkiLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsImF1dGhVUkwiLCJoeWJyaWRFbmNvZGUiLCJ0cmF2ZWxSdWxlTWVzc2FnZSIsInBpaSIsIm9yaWdpbmF0b3IiLCJiZW5lZmljaWFyeSIsImJlbmVmaWNpYXJ5RGlkS2V5IiwianNvbkRpZEtleSIsImNvdW50ZXJwYXJ0eURJREtleSIsInVuZGVmaW5lZCIsInBpaUl2bXMiLCJhZ2VudCIsIktNU19TRUNSRVRfS0VZIiwiZGlkTWFuYWdlckltcG9ydCIsIkpTT04iLCJwYXJzZSIsImdlbmVyYXRlUElJRmllbGQiLCJvcmlnaW5hdG9yVkFTUGRpZCIsImJlbmVmaWNpYXJ5VkFTUGRpZCIsInNlbmRlckRJREtleSIsImRpZCIsImVuY3J5cHRpb25NZXRob2QiLCJIWUJSSUQiLCJlcnJvciIsImVycm9yTWVzc2FnZSIsIm1lc3NhZ2UiLCJ0b1N0cmluZyIsImVycm9yRGV0YWlscyIsInN0cmluZ2lmeSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUElJc2RrLCB7XG4gICAgQWdlbnRUeXBlLFxuICAgIGluaXRBZ2VudCxcbiAgICBQSUlFbmNyeXB0aW9uTWV0aG9kLFxufSBmcm9tIFwiQG5vdGFiZW5lL3BpaS1zZGtcIjtcblxuaW1wb3J0ICogYXMgdXRpbCBmcm9tIFwidXRpbFwiO1xuaW1wb3J0IHtUcmF2ZWxSdWxlLCBUcmF2ZWxSdWxlT3B0aW9uc30gZnJvbSBcIi4vdHlwZXMvdHlwZVwiO1xuXG5jb25zdCByZXF1aXJlZEZpZWxkcyA9IFtcbiAgICBcImttc1NlY3JldEtleVwiLFxuICAgIFwiYmFzZVVSTFBJSVwiLFxuICAgIFwiYXVkaWVuY2VQSUlcIixcbiAgICBcImNsaWVudElkXCIsXG4gICAgXCJjbGllbnRTZWNyZXRcIixcbiAgICBcImF1dGhVUkxcIixcbiAgICBcImpzb25EaWRLZXlcIixcbl07XG5cbmV4cG9ydCBjbGFzcyBQSUlFbmNyeXB0aW9uIHtcbiAgICBwdWJsaWMgdG9vbHNldDogUElJc2RrO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb25maWc6IFRyYXZlbFJ1bGVPcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICBjb25zdCBtaXNzaW5nRmllbGRzID0gcmVxdWlyZWRGaWVsZHMuZmlsdGVyKFxuICAgICAgICAgICAgKGZpZWxkKSA9PiAhKGZpZWxkIGluIHRoaXMuY29uZmlnKVxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChtaXNzaW5nRmllbGRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBgTWlzc2luZyBQSUkgY29uZmlndXJhdGlvbiBmaWVsZHM6ICR7bWlzc2luZ0ZpZWxkcy5qb2luKFwiLCBcIil9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudG9vbHNldCA9IG5ldyBQSUlzZGsoe1xuICAgICAgICAgICAga21zU2VjcmV0S2V5OiBjb25maWcua21zU2VjcmV0S2V5LFxuICAgICAgICAgICAgcGlpVVJMOiBjb25maWcuYmFzZVVSTFBJSSxcbiAgICAgICAgICAgIGF1ZGllbmNlOiBjb25maWcuYXVkaWVuY2VQSUksXG4gICAgICAgICAgICBjbGllbnRJZDogY29uZmlnLmNsaWVudElkLFxuICAgICAgICAgICAgY2xpZW50U2VjcmV0OiBjb25maWcuY2xpZW50U2VjcmV0LFxuICAgICAgICAgICAgYXV0aFVSTDogY29uZmlnLmF1dGhVUkwsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIGh5YnJpZEVuY29kZSh0cmF2ZWxSdWxlTWVzc2FnZTogVHJhdmVsUnVsZSkge1xuICAgICAgICBjb25zdCBwaWkgPSB0cmF2ZWxSdWxlTWVzc2FnZS5waWkgfHwge1xuICAgICAgICAgICAgb3JpZ2luYXRvcjogdHJhdmVsUnVsZU1lc3NhZ2Uub3JpZ2luYXRvcixcbiAgICAgICAgICAgIGJlbmVmaWNpYXJ5OiB0cmF2ZWxSdWxlTWVzc2FnZS5iZW5lZmljaWFyeSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBiZW5lZmljaWFyeURpZEtleSwganNvbkRpZEtleSwga21zU2VjcmV0S2V5IH0gPSB0aGlzLmNvbmZpZztcbiAgICAgICAgY29uc3QgY291bnRlcnBhcnR5RElES2V5ID0gYmVuZWZpY2lhcnlEaWRLZXkgfHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIGxldCBwaWlJdm1zO1xuICAgICAgICBsZXQgYWdlbnQ7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGFnZW50ID0gaW5pdEFnZW50KHsgS01TX1NFQ1JFVF9LRVk6IGttc1NlY3JldEtleSB9KS5hZ2VudCBhcyBBZ2VudFR5cGU7XG4gICAgICAgICAgICBhd2FpdCBhZ2VudC5kaWRNYW5hZ2VySW1wb3J0KEpTT04ucGFyc2UoanNvbkRpZEtleSkpO1xuICAgICAgICAgICAgcGlpSXZtcyA9IGF3YWl0IHRoaXMudG9vbHNldC5nZW5lcmF0ZVBJSUZpZWxkKHtcbiAgICAgICAgICAgICAgICBwaWksXG4gICAgICAgICAgICAgICAgb3JpZ2luYXRvclZBU1BkaWQ6IHRyYXZlbFJ1bGVNZXNzYWdlLm9yaWdpbmF0b3JWQVNQZGlkLFxuICAgICAgICAgICAgICAgIGJlbmVmaWNpYXJ5VkFTUGRpZDogdHJhdmVsUnVsZU1lc3NhZ2UuYmVuZWZpY2lhcnlWQVNQZGlkLFxuICAgICAgICAgICAgICAgIGNvdW50ZXJwYXJ0eURJREtleSxcbiAgICAgICAgICAgICAgICBhZ2VudCxcbiAgICAgICAgICAgICAgICBzZW5kZXJESURLZXk6IEpTT04ucGFyc2UoanNvbkRpZEtleSkuZGlkLFxuICAgICAgICAgICAgICAgIGVuY3J5cHRpb25NZXRob2Q6IFBJSUVuY3J5cHRpb25NZXRob2QuSFlCUklELFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8IGVycm9yLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBjb25zdCBlcnJvckRldGFpbHMgPSBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBnZW5lcmF0ZSBQSUkgZmllbGRzIGVycm9yOiAke2Vycm9yTWVzc2FnZX0uIERldGFpbHM6ICR7ZXJyb3JEZXRhaWxzfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYXZlbFJ1bGVNZXNzYWdlXG4gICAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsT0FBT0EsTUFBTSxJQUVUQyxTQUFTLEVBQ1RDLG1CQUFtQixRQUNoQixtQkFBbUI7QUFLMUIsTUFBTUMsY0FBYyxHQUFHLENBQ25CLGNBQWMsRUFDZCxZQUFZLEVBQ1osYUFBYSxFQUNiLFVBQVUsRUFDVixjQUFjLEVBQ2QsU0FBUyxFQUNULFlBQVksQ0FDZjtBQUVELE9BQU8sTUFBTUMsYUFBYSxDQUFDO0VBR3ZCQyxXQUFXQSxDQUFrQkMsTUFBeUIsRUFBRTtJQUFBLEtBQTNCQSxNQUF5QixHQUF6QkEsTUFBeUI7SUFBQUMsZUFBQTtJQUNsRCxJQUFJLENBQUNELE1BQU0sR0FBR0EsTUFBTTtJQUNwQixNQUFNRSxhQUFhLEdBQUdMLGNBQWMsQ0FBQ00sTUFBTSxDQUN0Q0MsS0FBSyxJQUFLLEVBQUVBLEtBQUssSUFBSSxJQUFJLENBQUNKLE1BQU0sQ0FDckMsQ0FBQztJQUVELElBQUlFLGFBQWEsQ0FBQ0csTUFBTSxHQUFHLENBQUMsRUFBRTtNQUMxQixNQUFNLElBQUlDLEtBQUssQ0FDVixxQ0FBb0NKLGFBQWEsQ0FBQ0ssSUFBSSxDQUFDLElBQUksQ0FBRSxFQUNsRSxDQUFDO0lBQ0w7SUFFQSxJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJZCxNQUFNLENBQUM7TUFDdEJlLFlBQVksRUFBRVQsTUFBTSxDQUFDUyxZQUFZO01BQ2pDQyxNQUFNLEVBQUVWLE1BQU0sQ0FBQ1csVUFBVTtNQUN6QkMsUUFBUSxFQUFFWixNQUFNLENBQUNhLFdBQVc7TUFDNUJDLFFBQVEsRUFBRWQsTUFBTSxDQUFDYyxRQUFRO01BQ3pCQyxZQUFZLEVBQUVmLE1BQU0sQ0FBQ2UsWUFBWTtNQUNqQ0MsT0FBTyxFQUFFaEIsTUFBTSxDQUFDZ0I7SUFDcEIsQ0FBQyxDQUFDO0VBQ047RUFFQSxNQUFNQyxZQUFZQSxDQUFDQyxpQkFBNkIsRUFBRTtJQUM5QyxNQUFNQyxHQUFHLEdBQUdELGlCQUFpQixDQUFDQyxHQUFHLElBQUk7TUFDakNDLFVBQVUsRUFBRUYsaUJBQWlCLENBQUNFLFVBQVU7TUFDeENDLFdBQVcsRUFBRUgsaUJBQWlCLENBQUNHO0lBQ25DLENBQUM7SUFDRCxNQUFNO01BQUVDLGlCQUFpQjtNQUFFQyxVQUFVO01BQUVkO0lBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQ1QsTUFBTTtJQUNuRSxNQUFNd0Isa0JBQWtCLEdBQUdGLGlCQUFpQixJQUFJRyxTQUFTO0lBRXpELElBQUlDLE9BQU87SUFDWCxJQUFJQyxLQUFLO0lBRVQsSUFBSTtNQUNBQSxLQUFLLEdBQUdoQyxTQUFTLENBQUM7UUFBRWlDLGNBQWMsRUFBRW5CO01BQWEsQ0FBQyxDQUFDLENBQUNrQixLQUFrQjtNQUN0RSxNQUFNQSxLQUFLLENBQUNFLGdCQUFnQixDQUFDQyxJQUFJLENBQUNDLEtBQUssQ0FBQ1IsVUFBVSxDQUFDLENBQUM7TUFDcERHLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQ3dCLGdCQUFnQixDQUFDO1FBQzFDYixHQUFHO1FBQ0hjLGlCQUFpQixFQUFFZixpQkFBaUIsQ0FBQ2UsaUJBQWlCO1FBQ3REQyxrQkFBa0IsRUFBRWhCLGlCQUFpQixDQUFDZ0Isa0JBQWtCO1FBQ3hEVixrQkFBa0I7UUFDbEJHLEtBQUs7UUFDTFEsWUFBWSxFQUFFTCxJQUFJLENBQUNDLEtBQUssQ0FBQ1IsVUFBVSxDQUFDLENBQUNhLEdBQUc7UUFDeENDLGdCQUFnQixFQUFFekMsbUJBQW1CLENBQUMwQztNQUMxQyxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsT0FBT0MsS0FBSyxFQUFFO01BQ1osTUFBTUMsWUFBWSxHQUFHRCxLQUFLLENBQUNFLE9BQU8sSUFBSUYsS0FBSyxDQUFDRyxRQUFRLENBQUMsQ0FBQztNQUN0RCxNQUFNQyxZQUFZLEdBQUdiLElBQUksQ0FBQ2MsU0FBUyxDQUFDTCxLQUFLLENBQUM7TUFDMUMsTUFBTSxJQUFJakMsS0FBSyxDQUFFLHdDQUF1Q2tDLFlBQWEsY0FBYUcsWUFBYSxFQUFDLENBQUM7SUFDckc7SUFFQSxPQUFPekIsaUJBQWlCO0VBQzVCO0FBQ0oifQ==